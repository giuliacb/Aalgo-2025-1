import locale
import pytz # type: ignore // pip install pytz (p usar no vs code)
from datetime import datetime

# Ajustar a localidade para en_US.UTF-8
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

# Definir o fuso horário para o Brasil (Brasília)
con_fuso_horario = pytz.timezone("America/Sao_Paulo")

# Função para formatar tempo de execução (dado tempo de início e fim, retorna h:m:milisegundos formatado)
def formata_tempo_execucao(dttInicio, dttFim):
    strTempo = dttFim - dttInicio
    str_tempo_execucao_formatado = "{:02d}:{:02d}.{:06d}".format(
        strTempo.seconds // 60,  # Minutos
        strTempo.seconds % 60,  # Segundos
        strTempo.microseconds  # Microsegundos
    )
    return str_tempo_execucao_formatado

# Função para formatar a data e hora
def formata_data(dttParametro):
    return dttParametro.strftime("%d/%m/%Y - %H:%M:%S.%f")

# Função para ler um número inteiro do usuário
def ler_inteiro(strMensagem):
    while True:
        try:
            tamanho = int(input(strMensagem))
            break  # Se a entrada for válida, sai do loop
        except ValueError:
            print("Erro: Por favor, digite um número inteiro válido.")
    return tamanho

# Função para marcar o início de um processo e exibir a data e hora
def marcar_inicio(strMensagem):
    dttInicio = datetime.now(con_fuso_horario)
    dttInicioFormatado = formata_data(dttInicio)
    print(f"Iniciando {strMensagem} as : " + str(dttInicioFormatado))
    return dttInicio

# Função para marcar o fim de um processo e exibir a data e hora
def marcar_fim(strMensagem):
    dttFim = datetime.now(con_fuso_horario)
    dttFimFormatado = formata_data(dttFim)
    print(f"Finalizando {strMensagem} as : " + str(dttFimFormatado))
    return dttFim

# Função recursiva para calcular o fatorial de um número
def fatorial(n):
    # Caso base: fatorial de 0 ou 1 é 1
    if n == 0 or n == 1:
        return 1
    # Caso recursivo: fatorial de n é n * fatorial de (n-1)
    else:
        return n * fatorial(n - 1)

# Função principal para executar o cálculo e medir o tempo de execução
def main():
    # Ler o número n para o cálculo do fatorial
    n = ler_inteiro("Digite um número inteiro para calcular o fatorial: ")

    # Marcar o início do processo
    dttInicio = marcar_inicio("Cálculo do fatorial")

    # Calcular o fatorial
    resultado = fatorial(n)
    print(f"O fatorial de {n} é: {resultado}")

    # Marcar o fim do processo
    dttFim = marcar_fim("Cálculo do fatorial")

    # Calcular e exibir o tempo de execução
    tempo_execucao = formata_tempo_execucao(dttInicio, dttFim)
    print(f"Tempo de execução: {tempo_execucao}")

main() #chamada da função main

# Digite um número inteiro para calcular o fatorial: 10
# Iniciando Cálculo do fatorial as : 28/02/2025 - 10:54:31.065703
# O fatorial de 10 é: 3628800
# Finalizando Cálculo do fatorial as : 28/02/2025 - 10:54:31.065951
# Tempo de execução: 00:00.000248


# Digite um número inteiro para calcular o fatorial: 100
# Iniciando Cálculo do fatorial as : 28/02/2025 - 10:55:12.280906
# O fatorial de 100 é: 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
# Finalizando Cálculo do fatorial as : 28/02/2025 - 10:55:12.281171
# Tempo de execução: 00:00.000265


# Digite um número inteiro para calcular o fatorial: 500
# Iniciando Cálculo do fatorial as : 28/02/2025 - 10:55:42.897381
# O fatorial de 500 é: 1220136825991110068701238785423046926253574342803192842192413588385845373153881997605496447502203281863013616477148203584163378722078177200480785205159329285477907571939330603772960859086270429174547882424912726344305670173270769461062802310452644218878789465754777149863494367781037644274033827365397471386477878495438489595537537990423241061271326984327745715546309977202781014561081188373709531016356324432987029563896628911658974769572087926928871281780070265174507768410719624390394322536422605234945850129918571501248706961568141625359056693423813008856249246891564126775654481886506593847951775360894005745238940335798476363944905313062323749066445048824665075946735862074637925184200459369692981022263971952597190945217823331756934581508552332820762820023402626907898342451712006207714640979456116127629145951237229913340169552363850942885592018727433795173014586357570828355780158735432768888680120399882384702151467605445407663535984174430480128938313896881639487469658817504506926365338175055478128640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# Finalizando Cálculo do fatorial as : 28/02/2025 - 10:55:42.897917
# Tempo de execução: 00:00.000536


# Para 1000
# RecursionError: maximum recursion depth exceeded

# Digite um número inteiro para calcular o fatorial: 969
# Iniciando Cálculo do fatorial as : 28/02/2025 - 10:57:10.193541
# O fatorial de 969 é: 643689121736997341901315671294197457539312695375029852491797224694859333126068878171160108052877972739634243911582885708499318962675508478790787612244250292878948189818948906699479029518264285411145634624113796833489489963845535445185685972203491214545373372949280711329917119918330466854479457485881056755493518634900789224157696368331714783544719124192525952158251289389106048960055568138126247999391756079679436028167257087596585658391088800299056659948001593319923304052806099806325664883540132206210269309645589141310114082752713447992836350591576683569040307482520841028857920466037163250867726576572165380060440004579383187097153372167508937767816369696180944056708991658679855463205350626473476644168890685087051893399900719956421810766478091831868784185178172551329199569123517707315841308739960698867543133447747068700390851626064466681856977144479957119609411803387302007294119835122617001700107177811114329232263445504890396403061290135473506956959516621767081346067066521527732535322711169065572167297889687393402836164919552447347756619011741961246099289914745799951621533201514668839350637645820857498149686428479296133897859427274292522220234907702741108559059617265446126729313987870738679441461329722089332910516449287850129965196222126435379056011926703666749403060065255279031632751811940049966675211715294930870621560801029132058412720160092895143753688892745378183485463210830315277997930024466048012653753830581656025858396920240624728423794173367692320067179551505593458281838001009884781542234825521445079988059809773793154886745560183454411203669632453549640975676057331323650315939189101475273127138601009419314825052894451196445435840005668732422515399515438981701732504999850983188356311492025450094007894801671320634137037328523813610746983489391412971157274109169501531722872931749716206868439908804510226226583671078158926242685450011501241440754865312036101430796554929047665623255014898724601833786190808852224733219308268788379448709501121182170986757351119936404202349060726557313629036184877449273570037596677489653953467797810072209355570583296885255609806439148923902473064698790892710076004316091081765355307276150109268982738857965856841273085374642940115162665085905114732521980562590392542822400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# Finalizando Cálculo do fatorial as : 28/02/2025 - 10:57:10.194397
# Tempo de execução: 00:00.000856

# Complexidade Assintótica (O(n)):
# O algoritmo de cálculo de fatorial recursivo tem uma complexidade assintótica de O(n), 
# onde n é o número fornecido para o cálculo. Isso ocorre porque a função recursiva chama 
# a si mesma uma vez para cada número de 1 até n. Portanto, o número de chamadas recursivas 
# é proporcional ao valor de n, resultando em uma complexidade linear.

# Justificativa:
# A função recursiva fatorial(n) faz uma chamada recursiva para calcular fatorial(n - 1) até 
# que n chegue a 1. Ou seja, o número de chamadas recursivas é n (uma para cada valor de n de 
# 1 até o valor original).
#   Cada chamada recursiva faz uma multiplicação simples, que é uma operação de tempo constante, ou seja, O(1).
#   Como o número de chamadas recursivas cresce linearmente com n, a complexidade do algoritmo é O(n).