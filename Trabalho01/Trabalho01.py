import requests
from bs4 import BeautifulSoup
import re
import time
import logging  # permite resgistrar logs no sistema, armazenando erros, avisos e a√ß√µes
import csv
import os
from urllib.parse import urlparse # urlparse serve para analisar e decompor urls em seus comps (protocolo, dominio, caminho...)
from datetime import datetime

#configurando logs CSV
log_file = "monitoramento.csv"

#verifica se o arquivo monitoramento.csv ja existe para nn sobrescrever os dados
#os fornece fun√ß√µes para interagir com o sistema operacional
if not os.path.exists(log_file): 
  with open(log_file, "w", newline="", encoding="utf-8") as file:
    writer = csv.writer(file)
    writer.writerow(["Data", "Hora", "Usu√°rio", "N√≠vel", "Mensagem"])


def registrar_log(usuario, mensagem, nivel="INFO"):
  """Registra um log personalizado em arquivo CSV com o nome do usu√°rio, data e hora, mensagem e info."""
  now = datetime.now()
  data = now.strftime("%d-%m-%Y")
  hora = now.strftime("%H:%M:%S")
  with open(log_file, "a", newline="", encoding="utf-8") as file:
     writer = csv.writer(file)
     writer.writerow([data, hora, usuario, nivel, mensagem])


#validando se a url √© valida
def validar_url(url):
  """Verifica se a URL fornecida √© v√°lida.

  Args:
    url (str): URL a ser validada.

  Returns:
    bool: True se a URL for v√°lida, False caso contr√°rio.
  """
  try:
    resultado = urlparse(url)
    #scheme -> verifica de a url possui um esquema (http ou https)
    #netloc -> verifica se url possui dominio (tipo exemplo.com)
    #all[] retorna True se ambos os elementos forem valores n√£o vazios
    return all([resultado.scheme, resultado.netloc])
  except ValueError:
    return False


#solicitando nome ao usuario 
def solicitar_nome_user():
  """Solicita o nome do usu√°rio e valida o formato.

    Returns:
        str: Nome do usu√°rio v√°lido.
  """
  while True:
    nome = input("Digie seu nome: ").strip() #strip remove espa√ßos extras no inicio e final
    #[A-Za-z]{3,} garante que tenha pelo menos 3 letras
    #[A-Za-z]{3,}(\s[A-Za-z]+)* garante que seja composto apenas por letras, permite nomes compostos mas n√£o espa√ßos extras
    if re.fullmatch(r"[A-Za-z]{3,}(\s[A-Za-z]+)*", nome):
      return nome
    else:
      print("Nome inv√°lido. Deve conter pelo menos 3 letras e apenas caracteres alfab√©ticos.")


#xpath localiza o elemento html exato que contem o numero 
def encontrar_xpath(site, numero, usuario):
  """Encontra o XPath do n√∫mero dentro do HTML.

  Args:
    site (BeautifulSoup): Objeto BeautifulSoup do HTML.
    numero (str): N√∫mero a ser localizado.

  Returns:
   str: XPath do elemento contendo o n√∫mero.
  """
  #busca todos os elementos de texto no ttml que correspondem a expressao regular que busca exatamente o numero esperado
  for i, tag in enumerate(site.find_all(string=re.compile(re.escape(numero)))):
    caminho = []
    while tag:
      if tag.parent is None:
         break #sai do loop se nao houver mais pai
      position = list(tag.parent.children).index(tag) + 1
      caminho.insert(0, f"{tag.parent.name}[{position}]")
      tag = tag.parent
    xpath = "/" + "/".join(caminho)
    registrar_log(usuario, f"XPath do n√∫mero {numero}: {xpath}")
    return xpath
  return "XPath n√£o encontrado."


def extrair_numero(url, posicao, usuario):
  #simula uma requisi√ß√£o feita por um navegador real - evita bloqueio
  """Extrai um n√∫mero de uma p√°gina web na posi√ß√£o especificada.

    Args:
        url (str): URL da p√°gina web.
        posicao (int): Posicao do n√∫mero na lista de n√∫meros encontrados.

    Returns:
        tuple: (numero, contexto) onde numero √© o n√∫mero extra√≠do e contexto √© o trecho ao redor.
    """
  headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
  }

  try:
    #requests.get() √© uma fun√ß√£o da biblioteca requests usada para fazer uma requisi√ß√£o HTTP do tipo GET (solicitar dados de um servidor)
    requisicao = requests.get(url, headers=headers, timeout=10)
    requisicao.raise_for_status()  # Verifica se a resposta foi bem-sucedida (c√≥digo de status HTTP 200)
  except requests.RequestException as e:
    registrar_log(usuario, f"Erro ao acessar a URL {url}: {e}", "ERROR")
    return None, None, None
    

  site = BeautifulSoup(requisicao.text, "html.parser")  # Analisa o conte√∫do da p√°gina
  texto_pagina = site.get_text() # Extrai o texto da p√°gina

  # Encontra todos os n√∫meros na p√°gina (inteiros e decimais)
  numeros_encontrados = re.findall(r"\d+[\.,]?\d*", texto_pagina)
  #\d+ -> procura um ou mais digitos (0-9)
    #[\.,]? -> procura opcionalmente (?) um ponto ou virgula que s√£o usados como separadores decimais
    #\d* -> procura zero ou mais d√≠gitos ap√≥s os separador decimal (0-9)
    #re.findall() √© uma fun√ß√£o da biblioteca re que procura todas as ocorr√™ncias de um padr√£o (express√£o regular) dentro de uma string (texto_pagina)

  if numeros_encontrados and posicao < len(numeros_encontrados):
      numero = numeros_encontrados[posicao]  # Pega o n√∫mero da posi√ß√£o desejada
      inicio = texto_pagina.find(numero)  # Encontra o √≠ndice de onde o n√∫mero aparece
      fim = inicio + len(numero)  # √çndice final do n√∫mero

      # Define um trecho ao redor do n√∫mero para dar contexto (X caracteres antes e depois)
      inicio_contexto = max(0, inicio - 5)  # Garante que n√£o pegue √≠ndices negativos
      fim_contexto = min(len(texto_pagina), fim + 150)  # Limita ao tamanho do texto

      #slicing (fatiamento) para extrair um trecho da string texto_pagina entre as posi√ß√µes indicadas por inicio_contexto e fim_contexto
      contexto = texto_pagina[inicio_contexto:fim_contexto].strip()

      xpath = encontrar_xpath(site, numero, usuario)
      registrar_log(usuario, f"N√∫mero encontrado: {numero} (posi√ß√£o {posicao})")
      return numero, contexto, xpath
    
  registrar_log(usuario, "Nenhum n√∫mero encontrado na p√°gina.", "WARNING")
  return None, None, None


#garante que um bloco de c√≥digo seja executado apenas quando o script √© executado diretamente
#ou seja, quando um script √© importado em outro programa, __name__ recebe o nome do arquivo
#se rodar o script diretamente, ele chama e roda todas as fun√ß√µes, ja se importar em outro script, 
#as fun√ß√µes estar√£o disponiveis mas n√£o ser√£o chamadas automaticamente
if __name__ == "__main__":
  usuario = solicitar_nome_user()
  registrar_log(usuario, "Usu√°rio registrado e iniciou monitoramento.")

  url = input("Digite a sua URL desejada: ")
  while not validar_url(url):
    print("URL inv√°lida. Por favor, digite novamente.")
    url = input("Digite a sua URL desejada: ").strip() #sem o strip() a valida√ß√£o poderia falhar por causa dos espa√ßos

  try: # captura erros ao converter a entrada do usuario em um int
    # Solicita a posi√ß√£o do n√∫mero ao usu√°rio
    posicao = int(input("Digite a posi√ß√£o do n√∫mero a ser monitorado (come√ßando de 0): "))
  except ValueError: #se a conversao falhar um erro (ValueError) ocorre...esse bloco o captura, exibe uma mensagem de error e finaliza o programa (exit())
    registrar_log(usuario, "A posi√ß√£o deve ser um n√∫mero inteiro.", "ERROR")
    exit()

  # Capturando o n√∫mero inicial e seu contexto
  numero_inicial, contexto_inicial, xpath_inicial = extrair_numero(url, posicao, usuario)

  #verifica se o num foi encontrado na pag
  if numero_inicial:
      print(f"Monitorando... N√∫mero inicial encontrado na p√°gina: {numero_inicial}")
      print(f"Contexto: ...{contexto_inicial}...")
      print(f"XPath: {xpath_inicial}")
  else:
      print("Nenhum n√∫mero encontrado na p√°gina.")
      exit()

  # Loop para monitorar mudan√ßas no n√∫mero
  while True:
      time.sleep(30)  # Espera 30 segundos antes de verificar novamente
      numero_atual, contexto_atual, xpath_atual = extrair_numero(url, posicao, usuario)

      #o primeiro numero_atual garente que a variavel nao √© None ou str vazia
      #ja numero_atual != numero_inicial verifica se o num mudou
      if numero_atual and numero_atual != numero_inicial:
          print(f"üö® Mudan√ßa detectada! Novo valor: {numero_atual} (Anterior: {numero_inicial})")
          print(f"Novo contexto: ...{contexto_atual}...")
          print(f"Novo XPath: {xpath_atual}.")
          registrar_log(usuario, f"üö® Mudan√ßa detectada: {numero_inicial} -> {numero_atual}")
          numero_inicial = numero_atual  # Atualiza o n√∫mero inicial para continuar monitorando
      else:
          print(f"Nenhuma mudan√ßa detectada. O n√∫mero continua: {numero_inicial}")


# python -m pydoc Trabalho01 -- GERA DOCUMENTA√á√ÉO NO TERMINAL
# python -m pydoc -w Trabalho01 -- GERA ARQUIVO HTML COM A DOCUMENTA√á√ÉO
# python -m pydoc -p 8000 -- RODAR UM SERVIDOR DE DOCUMENTA√á√ÉO
